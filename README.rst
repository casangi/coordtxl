Introduction
------------

This library was created from the coordinates package of `JSky <https://jsky.sourceforge.net/>`_ version 3.0. The primary goal is to create a JavaScript coordinate conversion library for use in a browser. Secondary goals are to make the library available for Java applications and node.js applications. It is implemented in Java and is converted to JavaScript using `JSweet <https://www.jsweet.org/>`_.

Building Java JAR
-----------------

You can build and test the Java libraries by running:

* :code:`./gradlew build`

This builds the core :code:`coordtxl` JAR file in :code:`build/libs/`. There is an extra JAR file which can be built with:

* :code:`./gradlew nomtamJar`

This builds a JAR file which depends on the `nom.tam.fits <https://github.com/nom-tam-fits/nom-tam-fits>`_ package. This JAR implements a FITS keyword handler based on the :code:`nom.tam.fits` header object.

Running Java Tests
------------------

While the build steps above run the Java tests, they can also be run directly with :code:`./gradlew test --tests 'coordtxl.*'`.

Generating TypeScript
---------------------

The TypeScript library can be built with:

* :code:`./gradlew jsweet`

This will build the typescript library in :code:`build/typescript/coordtxl`. The TypeScript library is a union of TypeScript generated by `JSweet <https://www.jsweet.org/>`_ and the TypeScript code found in :code:`src/main/typescript/coordtxl`.

This may fail if Java isn't configured properly or :code:`JAVA_HOME` is not set.

Generating JavaScript
---------------------

The TypeScript library can then be transformed into JavaScript using the `TypeScript compiler <https://www.typescriptlang.org/docs/handbook/compiler-options.html>`_ (:code:`tsc`). While the `Yarn build tool <https://yarnpkg.com/>`_ is used as the intermediate build too which runs :code:`tsc`, :code:`gradle` is used to run :code:`yarn`:

* :code:`./gradlew tsc`

This will build the javascript library in :code:`build/javascript/coordtxl`.

Running Typescript Tests
------------------------

A basic Typescript test is included which checks the coordinate conversion is found in :code:`src/test/typescript/tstest.ts`. It can be run with:

* :code:`./gradlew tstest`

This test uses a JSON file (:code:`src/test/resources/coordtxl/test-residual-header.json`) created from a CASA image to initialize a :code:`WCSTransform` object and convert the pixel origin coordinate to the J2000 coordinate :code:`20:02:54.100, +39:52:37.50 J2000`.

Build NPM Package
-----------------

The :code:`coordtxl` npm package can be created in :code:`dist/coordtxl` by running:

* :code:`./gradlew npmbuild`

It can then be tested by installing this newly built package in a separate npm package (*created for the purpose of testing*) with:

* :code:`npm install file://path/to/work/directory/coordtxl/dist/coordtxl`

Publishing NPM package
----------------------

:code:`coordtxl` can be published to `npm <http://npmjs.com>`_ by running:

* :code:`./gradlew npmpub`

running :code:`npmbuild` is not required before running :code:`npmpub`, but it does provide a way to check the package before making it available.

FITS Header Keywords Used
-------------------------

This is a list of the FITS header keywords used from a :code:`WCSKeywordProvider` (*circa July, 2023*) by the :code:`WCSTransform` conversion class. Each line includes the member function called, the keyword retrieved and along with sample values from a test :code:`test.residual` interactive clean residual image. The :code:`<default: ...>` return values indicates the value actually returned and the fact that the default value was returned instead of a value supplied from the CASA FITS header.

#. :code:`getDoubleValue`:	NAXIS1, 4.0
#. :code:`getDoubleValue`:	NAXIS2, 512.0
#. :code:`getDoubleValue`:	EQUINOX, 2000.0
#. :code:`findKey`:	PLTRAH
#. :code:`getStringValue`:	CTYPE1, RA---SIN
#. :code:`getStringValue`:	CTYPE2, DEC--SIN
#. :code:`getDoubleValue`:	CRPIX1, 257.0
#. :code:`getDoubleValue`:	CRPIX2, 257.0
#. :code:`getDoubleValue`:	CRVAL1, 299.86875000000003
#. :code:`getDoubleValue`:	CRVAL2, 40.73375000000001
#. :code:`getDoubleValue`:	CDELT1, -0.0033333333333333335
#. :code:`getDoubleValue`:	CDELT2, 0.0033333333333333335
#. :code:`getDoubleValue`:	CROTA1, <default: 0.0>
#. :code:`getDoubleValue`:	CROTA2, <default: 0.0>
#. :code:`getDoubleValue`:	CCPIX1, <default: 0.0>
#. :code:`getDoubleValue`:	CCPIX2, <default: 0.0>
#. :code:`getDoubleValue`:	CCROT1, <default: 0.0>
#. :code:`findKey`:	EQUINOX
#. :code:`getDoubleValue`:	EQUINOX, 2000.0
#. :code:`getDoubleValue`:	DATE-OBS, <default: 0.0>
#. :code:`getDoubleValue`:	EPOCH, <default: 0.0>
#. :code:`findKey`:	RADECSYS
