/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

version = '0.1.0'

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': "${project.name}-core",
                   'Implementation-Version': project.version)
    }

    archiveBaseName = "${rootProject.name}-core"
    archiveVersion = project.version
    doLast {
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
        }
        println sourceSets.nomtam.output
    }
}

configurations {
    nomtamCompile
}

sourceSets{
    nomtam {
        java {
            srcDirs("src/nomtam/java")
        }
        compileClasspath = sourceSets.main.compileClasspath
        compileClasspath += configurations.nomtamCompile
        runtimeClasspath = sourceSets.main.runtimeClasspath
    }
}

dependencies {
    nomtamCompile 'gov.nasa.gsfc.heasarc:nom-tam-fits:1.17.1'
    nomtamCompile files(jar.archivePath)
}

compileNomtamJava {
    dependsOn(jar.archiveFile)
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation 'org.testng:testng:7.5'
    testImplementation 'com.google.code.gson:gson:2.8.5'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
}

tasks.named('test') {
    // Use TestNG for unit tests.
    useTestNG()
    afterTest { desc, result -> 
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

task printSourceSetInformation(){

    doLast{
        println ">>>>>--------->>> ${rootProject.name}"
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each { 
                print "  "+it.path+"\n"
            }
            println ""
        }
    }
}

task nomtamJar (type : Jar) {
    from sourceSets.nomtam.output
    manifest {
        attributes('Implementation-Title': "${project.name}-nomtam",
                   'Implementation-Version': project.version)
    }

    archiveBaseName = "${rootProject.name}-nomtam"
    archiveVersion = project.version
}

