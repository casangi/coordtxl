import org.jsweet.transpiler.EcmaScriptComplianceLevel;

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

// java compatibility version
sourceCompatibility = 1.11
targetCompatibility = 1.11


buildscript {
        ext {
                JSweetVersion = "3.1.0"
        }
        
        boolean snapshotMode = false;
        project.ext.repoType =  snapshotMode ? 'snapshot' : 'release';

        println "repoType=" + project.repoType + " JSweetVersion=${JSweetVersion}"

        repositories {
                mavenLocal()
                mavenCentral()
                maven {
                      url "http://repository.jsweet.org/artifactory/libs-" + project.repoType + "-local"
                      allowInsecureProtocol = true
                }
                maven {
                      url "http://repository.jsweet.org/artifactory/plugins-" + project.repoType + "-local"
                      allowInsecureProtocol = true
                }
                maven {
                      url "http://repository.jsweet.org/artifactory/libs-release-local"
                      allowInsecureProtocol = true
                }
                maven {
                      url "http://repository.jsweet.org/artifactory/plugins-release-local"
                      allowInsecureProtocol = true
                }
                maven {
                      url "https://plugins.gradle.org/m2/"
                }
        }
        dependencies {
                classpath("org.jsweet:jsweet-gradle-plugin:" + JSweetVersion) { transitive = true }
                classpath "com.github.node-gradle:gradle-node-plugin:5.0.0"
        }
}

repositories {
        mavenCentral()
        maven {
              url "http://repository.jsweet.org/artifactory/libs-" + project.repoType + "-local"
              allowInsecureProtocol = true
        }
        maven {
              url "http://repository.jsweet.org/artifactory/libs-release-local"
              allowInsecureProtocol = true
        }
}

dependencies {
        implementation group: 'org.jsweet', name: 'jsweet-transpiler', version: JSweetVersion
        implementation group: 'org.jsweet', name: 'jsweet-core', version: "6.3.0"
        implementation group: 'org.jsweet.candies', name: 'angular', version: "1.4.0-20201211"
//      implementation 'org.jsweet.candies.j4ts:j4ts-awtgeom:1.8.132-20170726'
//      implementation group: 'org.jsweet.candies', name: 'angular', version: "1.4.0-20201211"
//      implementation group: 'org.jsweet.candies', name: 'angular-route', version: "1.2.0-20201211"
//      implementation group: 'org.jsweet.candies', name: 'backbone', version:"1.3.0-20201211"
//      implementation group: 'org.jsweet.candies', name: 'knockout', version:"3.4.0-20170726"
        // Allows us to use 'marked', a Markdown to HTML converter: https://github.com/chjj/marked
//      implementation group: 'org.jsweet.candies', name: 'marked', version: "0.0.0-20170726"
}


/*****************************************************
compileJava {
        enabled = false
}
*****************************************************/

apply plugin: 'org.jsweet.jsweet-gradle-plugin'

jsweet {
        module = 'commonjs'
        targetVersion = 'ES5'
        verbose = true
        encoding = 'UTF-8'
        sourceMap = true
        sourceRoot = project.file('src')
        tsOnly = true
        tsOut = project.file('build/typescript')
        outDir = project.file('.gradle/js')
        includes = ['**/coordtxl/**/*.java', '**/def/**/*.java']
}

rootProject.tasks.named("jsweet").configure {
    /**********************************************************************
    *** install custom typescript code                                  ***
    **********************************************************************/
    doLast {
        copy {
            from fileTree(project.file('src/main/typescript/coordtxl'))
            into project.file('build/typescript/coordtxl')
        }
    }
}

apply plugin: 'com.github.node-gradle.node'

node {
    yarnVersion = "1.22.19"
    download = true
}

task tsc( type: YarnTask ) {
    dependsOn yarn
    /**************************************************************
    ***  'jsweet' is both the extension name and the task name  ***
    **************************************************************/
    dependsOn tasks.findByName('jsweet')
    yarnCommand = [ "build" ]
    args = [ ]
}

task tstest( type: YarnTask ) {
    dependsOn tsc
    yarnCommand = [ "tstest" ]
}

task npmbuild( type: YarnTask ) {
    dependsOn tstest
    yarnCommand = [ "npmbuild" ]
}

task npmpub( type: YarnTask ) {
    dependsOn npmbuild
    yarnCommand = [ "npmpub" ]
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': "${project.name}",
                   'Implementation-Version': project.version)
    }

    archiveBaseName = "${rootProject.name}"
    archiveVersion = project.version
    doLast {
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
        }
        println sourceSets.nomtam.output
    }
}

configurations {
    nomtamCompile
}

sourceSets{
    nomtam {
        java {
            srcDirs("src/nomtam/java")
        }
        compileClasspath = sourceSets.main.compileClasspath
        compileClasspath += configurations.nomtamCompile
        runtimeClasspath = sourceSets.main.runtimeClasspath
    }
}

dependencies {
    nomtamCompile 'gov.nasa.gsfc.heasarc:nom-tam-fits:1.17.1'
    nomtamCompile files(jar.archivePath)
}

compileNomtamJava {
    dependsOn(jar.archiveFile)
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation 'org.testng:testng:7.5'
    testImplementation 'com.google.code.gson:gson:2.8.5'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
}

tasks.named('test') {
    // Use TestNG for unit tests.
    useTestNG()
    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

task printSourceSetInformation(){

    doLast{
        println ">>>>>--------->>> ${rootProject.name}"
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""
        }
    }
}

task nomtamJar (type : Jar) {
    from sourceSets.nomtam.output
    manifest {
        attributes('Implementation-Title': "${project.name}-nomtam",
                   'Implementation-Version': project.version)
    }

    archiveBaseName = "${rootProject.name}-nomtam"
    archiveVersion = project.version
}
